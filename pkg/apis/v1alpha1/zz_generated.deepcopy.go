//go:build !ignore_autogenerated

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func (in *RestartSchedule) DeepCopyInto(out *RestartSchedule) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	in.Status.DeepCopyInto(&out.Status)
}

func (in *RestartSchedule) DeepCopy() *RestartSchedule {
	if in == nil {
		return nil
	}
	out := new(RestartSchedule)
	in.DeepCopyInto(out)
	return out
}

func (in *RestartSchedule) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *RestartScheduleList) DeepCopyInto(out *RestartScheduleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RestartSchedule, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

func (in *RestartScheduleList) DeepCopy() *RestartScheduleList {
	if in == nil {
		return nil
	}
	out := new(RestartScheduleList)
	in.DeepCopyInto(out)
	return out
}

func (in *RestartScheduleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *RestartScheduleSpec) DeepCopyInto(out *RestartScheduleSpec) {
	*out = *in
	out.TargetRef = in.TargetRef
}

func (in *RestartScheduleSpec) DeepCopy() *RestartScheduleSpec {
	if in == nil {
		return nil
	}
	out := new(RestartScheduleSpec)
	in.DeepCopyInto(out)
	return out
}

func (in *RestartScheduleStatus) DeepCopyInto(out *RestartScheduleStatus) {
	*out = *in
	if in.LastSuccessfulTime != nil {
		in, out := &in.LastSuccessfulTime, &out.LastSuccessfulTime
		*out = (*in).DeepCopy()
	}
	if in.NextScheduledTime != nil {
		in, out := &in.NextScheduledTime, &out.NextScheduledTime
		*out = (*in).DeepCopy()
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

func (in *RestartScheduleStatus) DeepCopy() *RestartScheduleStatus {
	if in == nil {
		return nil
	}
	out := new(RestartScheduleStatus)
	in.DeepCopyInto(out)
	return out
}

func (in *TargetRef) DeepCopyInto(out *TargetRef) {
	*out = *in
}

func (in *TargetRef) DeepCopy() *TargetRef {
	if in == nil {
		return nil
	}
	out := new(TargetRef)
	in.DeepCopyInto(out)
	return out
}
